CREATE DATABASE FOR_ABITURIENTS;
GO
USE FOR_ABITURIENTS;
CREATE TABLE GENDERS(
	ID INT IDENTITY PRIMARY KEY,
	GENDER_NAME VARCHAR(50) NOT NULL);
CREATE TABLE FAMILY_STATUS(
	ID INT IDENTITY PRIMARY KEY,
	STATUS_NAME VARCHAR(255) NOT NULL);
CREATE TABLE DOCUMENT_TYPES(
	ID INT IDENTITY PRIMARY KEY,
	DOC_NAME VARCHAR(255) NOT NULL);
CREATE TABLE STATUS_PRIVS(
	ID INT IDENTITY PRIMARY KEY,
	STATUS_PRIVS_NAME VARCHAR(255) NOT NULL);
CREATE TABLE PRIVELEGIES(
	ID INT IDENTITY PRIMARY KEY,
	PRIV_NAME VARCHAR(1000) NOT NULL,
	STATUS_PRIV_ID INT NOT NULL,
	STATUS_ACTIVE INT NOT NULL,
	FOREIGN KEY (STATUS_PRIV_ID) REFERENCES STATUS_PRIVS (ID));
CREATE TABLE AB_STATUS(
	ID INT IDENTITY PRIMARY KEY,
	ABST_NAME VARCHAR(255) NOT NULL);
CREATE TABLE FACULTIES(
	ID INT IDENTITY PRIMARY KEY,
	NAME_FACULTY VARCHAR(50) NOT NULL,
	CORPUS INT);
CREATE TABLE PROFESSORS(
	ID INT IDENTITY PRIMARY KEY,
	NAME_PROF VARCHAR(50) NOT NULL,
	ID_FACULTY INT NOT NULL,
	LOGIN VARCHAR(50),
	FOREIGN KEY (ID_FACULTY)  REFERENCES FACULTIES (ID));
CREATE TABLE TIMETABLE_TYPES(
	ID INT IDENTITY PRIMARY KEY,
	NAME_TYPE VARCHAR(50) NOT NULL);
CREATE TABLE SUBJECTS(
	ID INT IDENTITY PRIMARY KEY,
	NAME_SUBJECT VARCHAR(100) NOT NULL);
CREATE TABLE ABITURIENTS(
	ID INT IDENTITY PRIMARY KEY,
	SURNAME_R VARCHAR(50) NOT NULL,
	NAME_R VARCHAR(50) NOT NULL,
	MIDDLE_NAME_R VARCHAR(50),
	SURNAME_L VARCHAR(50) NOT NULL,
	NAME_L VARCHAR(50) NOT NULL,
	ID_GENDER INT NOT NULL,
	DATE_OF_BIRTH DATE NOT NULL,
	ID_FAMILY_STATUS INT NOT NULL,
	ID_DOCUMENT_TYPE INT NOT NULL,
	NUMBER_ID VARCHAR(14) NOT NULL,
	SERIAL VARCHAR(2) NOT NULL,
	SER_NUMBER VARCHAR(7) NOT NULL,
	ISSUE_AUTHOR VARCHAR(50) NOT NULL,
	DATE_FORM_ISSUE DATE NOT NULL,
	DATE_FOR_ISSUE DATE NOT NULL,
	AVER_EXAM NUMERIC(4,2),
	ID_PRIVILEGES INT NOT NULL,
	AVER_DIPLOM NUMERIC(4,2) NOT NULL,
	RESULT_POINTS NUMERIC(4,2),
	ID_STATUS_ABITURIENT INT NOT NULL,
	GROUP_EXAM INT,
	LOGIN_ABI VARCHAR(50),
	FOREIGN KEY (ID_GENDER)  REFERENCES GENDERS (ID),
	FOREIGN KEY (ID_FAMILY_STATUS)  REFERENCES FAMILY_STATUS (ID),
	FOREIGN KEY (ID_DOCUMENT_TYPE)  REFERENCES DOCUMENT_TYPES (ID),
	FOREIGN KEY (ID_PRIVILEGES)  REFERENCES PRIVELEGIES (ID),
	FOREIGN KEY (ID_STATUS_ABITURIENT)  REFERENCES AB_STATUS (ID));
CREATE TABLE EXAM_LISTS(
	ID INT IDENTITY PRIMARY KEY,
	ID_SUBJECT INT NOT NULL,
	ID_ABITURIENT INT NOT NULL,
	ID_PROFESSOR INT NOT NULL,
	EXAM_GRADE NUMERIC(4,2) NOT NULL,
	FOREIGN KEY (ID_SUBJECT)  REFERENCES SUBJECTS (ID),
	FOREIGN KEY (ID_ABITURIENT)  REFERENCES ABITURIENTS (ID),
	FOREIGN KEY (ID_PROFESSOR)  REFERENCES PROFESSORS (ID));
CREATE TABLE FORMS_STUDY(
	ID INT IDENTITY PRIMARY KEY,
	NAME_FORM VARCHAR(100) NOT NULL);
CREATE TABLE SPECIALITIES(
	ID INT IDENTITY PRIMARY KEY,
	NAME_SPEC VARCHAR(100) NOT NULL,
	ID_FACULTY INT NOT NULL,
	NUM_STUDENTS INT NOT NULL,
	SPECIALIZATION VARCHAR(100) NOT NULL,
	ID_FORM INT NOT NULL,
	FOREIGN KEY (ID_FACULTY)  REFERENCES FACULTIES (ID),
	FOREIGN KEY (ID_FORM)  REFERENCES FORMS_STUDY (ID));
CREATE TABLE TIMETABLE(
	ID INT IDENTITY PRIMARY KEY,
	ID_TYPE INT NOT NULL,
	ID_SUBJECT INT NOT NULL,
	DATE_OF_MEET DATETIME NOT NULL,
	AUDITORY VARCHAR(10) NOT NULL,
	ID_SPECIALTIES INT NOT NULL,
	FOREIGN KEY (ID_TYPE)  REFERENCES TIMETABLE_TYPES (ID),
	FOREIGN KEY (ID_SUBJECT)  REFERENCES SUBJECTS (ID),
	FOREIGN KEY (ID_SPECIALTIES)  REFERENCES SPECIALITIES (ID));
CREATE TABLE PRIORITY_OF_SPECIALITIES(
	ID INT IDENTITY PRIMARY KEY,
	ID_ABITURIENT INT NOT NULL,
	ID_SPECIALTIES INT NOT NULL,
	PRIORITY INT NOT NULL,
	FOREIGN KEY (ID_ABITURIENT)  REFERENCES ABITURIENTS (ID),
	FOREIGN KEY (ID_SPECIALTIES)  REFERENCES SPECIALITIES (ID));
CREATE TABLE STUDENTS(
    	ID INT IDENTITY PRIMARY KEY,
    	SURNAME_R VARCHAR(50) NOT NULL,
	NAME_R VARCHAR(50) NOT NULL,
	MIDDLE_NAME_R VARCHAR(50),
	SURNAME_L VARCHAR(50) NOT NULL,
	NAME_L VARCHAR(50) NOT NULL,
	ID_GENDER INT NOT NULL,
	DATE_OF_BIRTH DATE NOT NULL,
	ID_FAMILY_STATUS INT NOT NULL,
	ID_DOCUMENT_TYPE INT NOT NULL,
	NUMBER_ID VARCHAR(14) NOT NULL,
	SERIAL VARCHAR(2) NOT NULL,
	SER_NUMBER VARCHAR(7) NOT NULL,
	ISSUE_AUTHOR VARCHAR(50) NOT NULL,
	DATE_FORM_ISSUE DATE NOT NULL,
	DATE_FOR_ISSUE DATE NOT NULL,
	NUM_GROUP INT NOT NULL,
	ID_SPECIALTIES INT NOT NULL,
	ID_PRIVILEGES INT NOT NULL,
	FOREIGN KEY (ID_GENDER)  REFERENCES GENDERS (ID),
	FOREIGN KEY (ID_FAMILY_STATUS)  REFERENCES FAMILY_STATUS (ID),
	FOREIGN KEY (ID_DOCUMENT_TYPE)  REFERENCES DOCUMENT_TYPES (ID),
	FOREIGN KEY (ID_SPECIALTIES)  REFERENCES SPECIALITIES (ID),
	FOREIGN KEY (ID_PRIVILEGES)  REFERENCES PRIVELEGIES (ID));
INSERT GENDERS VALUES ('Мужской');
INSERT GENDERS VALUES ('Женский');
INSERT FAMILY_STATUS VALUES ('Холост. Детей нет');
INSERT FAMILY_STATUS VALUES ('Холост. Есть дети');
INSERT FAMILY_STATUS VALUES ('Женат. Детей нет');
INSERT FAMILY_STATUS VALUES ('Женат. Есть дети');
INSERT FAMILY_STATUS VALUES ('Не замужем. Детей нет');
INSERT FAMILY_STATUS VALUES ('Не замужем. Есть дети');
INSERT FAMILY_STATUS VALUES ('Замужем. Детей нет');
INSERT FAMILY_STATUS VALUES ('Замужем. Есть дети');
INSERT DOCUMENT_TYPES VALUES ('Паспорт');
INSERT DOCUMENT_TYPES VALUES ('Вид на жительство');
INSERT STATUS_PRIVS VALUES ('На общих основаниях');
INSERT STATUS_PRIVS VALUES ('Без вступительных испытаний испытаний');
INSERT STATUS_PRIVS VALUES ('Вне конкурса');
INSERT STATUS_PRIVS VALUES ('Преимущестенное право');
INSERT PRIVELEGIES VALUES ('Льгот нет', 1, 1);
INSERT PRIVELEGIES VALUES ('Ребенок-сирота и ребенок, оставшийся без попечения родителей, а также лицо из числа детей-сирот и детей, оставшихся без попечения родителей', 2, 1);
INSERT AB_STATUS VALUES ('Документы приняты');
INSERT AB_STATUS VALUES ('Документы не приняты');
INSERT AB_STATUS VALUES ('Документы отданы');
INSERT AB_STATUS VALUES ('Зачислен на курс');
INSERT AB_STATUS VALUES ('Не прошел по конкурсу');
INSERT FORMS_STUDY VALUES ('Дневная');
INSERT FORMS_STUDY VALUES ('Заочная');
INSERT FORMS_STUDY VALUES ('Вечерняя');
INSERT FACULTIES VALUES ('Факультет радиотехники и электроники');
INSERT FACULTIES VALUES ('Факультет компьютерного проектирования');
INSERT FACULTIES VALUES ('Факультет компьютерных технологий');
INSERT SPECIALITIES VALUES ('Профессиональное обучение (информатика)', 1, 30, 'Педагог-программист', 2);
INSERT SPECIALITIES VALUES ('Информационные системы и технологии (в бизнес-менеджменте)', 2, 30, 'Программист. Бизнес-аналитик', 1);
INSERT SPECIALITIES VALUES ('Программное обеспечение информационных технологий', 3, 60, 'Инженер-программист', 2);
INSERT SPECIALITIES VALUES ('Проектирование и производство программно-управляемых электронных средств', 2, 30, 'Инженер-электроник-программист', 2);
INSERT SPECIALITIES VALUES ('Электронные системы безопасности', 2, 30, 'Инженер-проектировщик', 2);
INSERT SPECIALITIES VALUES ('Программируемые мобильные системы', 2, 30, 'Инженер по электронным системам', 1);
INSERT SPECIALITIES VALUES ('Радиотехника (программируемые радиоэлектронные средства)', 1, 30, 'Инженер по радиоэлектронике', 2);
INSERT SPECIALITIES VALUES ('Промышленная электроника', 3, 30, 'Инженер по радиоэлектронике', 3);
INSERT SPECIALITIES VALUES ('Информационные технологии и управление в технических системах', 3, 30, 'Инженер по информационным технологиям и управлению', 3);
INSERT TIMETABLE_TYPES VALUES ('Консультация');
INSERT TIMETABLE_TYPES VALUES ('Экзамен');
INSERT SUBJECTS VALUES ('Основы алгоритмизации и программирования');
INSERT SUBJECTS VALUES ('Основы информационных технологий');
INSERT SUBJECTS VALUES ('Охрана труда. Охрана окружающей среды и энергосбережение');
INSERT PROFESSORS VALUES ('Луцик Юрий Александрович', 2);
INSERT PROFESSORS VALUES ('Рак Татьяна Александровна', 2);
INSERT PROFESSORS VALUES ('Оношко Дмитрий Евгеньевич', 2);
INSERT PROFESSORS VALUES ('Лукьянова Ирина Викторовна', 2);
INSERT PROFESSORS VALUES ('Ковальчук Анна Михайловна', 2);
INSERT PROFESSORS VALUES ('Желтко Юлия Юрьевна', 2);
INSERT PROFESSORS VALUES ('Телеш Инна Анатольевна', 1);
INSERT PROFESSORS VALUES ('Рышкель Оксана Станиславовна', 1);
INSERT PROFESSORS VALUES ('Ломонос Ольга Леонидовна', 1);
INSERT PROFESSORS VALUES ('Хлудеев Иван Иванович', 1);
INSERT PROFESSORS VALUES ('Бобровничая Марина Анатольевна', 1);
INSERT PROFESSORS VALUES ('Егоров Владислав Владимирович', 1);
INSERT PROFESSORS VALUES ('Колосов Станислав Васильевич', 3);
INSERT PROFESSORS VALUES ('Матвеенко Владимир Владимирович', 3);
INSERT PROFESSORS VALUES ('Мацкевич Ирина Юрьевна', 3);
INSERT PROFESSORS VALUES ('Павлова Татьяна Григорьевна', 3);
INSERT PROFESSORS VALUES ('Титова Анастасия Владимировна', 3);
INSERT PROFESSORS VALUES ('Кунцевич Ольга Юрьевна', 3);
CREATE ROLE PROFESSORS AUTHORIZATION PROFESSOR;
GRANT SELECT, INSERT, UPDATE, DELETE ON AB_STATUS TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON ABITURIENTS TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON DOCUMENT_TYPES TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON EXAM_LISTS TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON FACULTIES TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON FAMILY_STATUS TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON FORMS_STUDY TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON GENDERS TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRIORITY_OF_SPECIALITIES TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRIVELEGIES TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON PROFESSORS TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON SPECIALITIES TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON STATUS_PRIVS TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON STUDENTS TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON SUBJECTS TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON TIMETABLE TO ADMIN_ABI;
GRANT SELECT, INSERT, UPDATE, DELETE ON TIMETABLE_TYPES TO ADMIN_ABI;
CREATE LOGIN ABITURIENT WITH PASSWORD = 'Abitur2021';  
CREATE USER ABITURIENT FOR LOGIN ABITURIENT; 
CREATE ROLE ABITURIENTS AUTHORIZATION ABITURIENT;
CREATE LOGIN COMMISSION WITH PASSWORD = 'AdminAbi2021';  
CREATE USER COMMISSION FOR LOGIN COMMISSION; 
CREATE ROLE COMMISSIONS AUTHORIZATION COMMISSION;
GRANT UPDATE ON ABITURIENTS TO PROFESSORS;
GRANT UPDATE ON EXAM_LISTS TO PROFESSORS;
GRANT SELECT ON AB_STATUS TO ABITURIENTS;
GRANT SELECT ON ABITURIENTS TO ABITURIENTS;
GRANT SELECT ON DOCUMENT_TYPES TO ABITURIENTS;
GRANT SELECT ON FACULTIES TO ABITURIENTS;
GRANT SELECT ON FAMILY_STATUS TO ABITURIENTS;
GRANT SELECT ON FORMS_STUDY TO ABITURIENTS;
GRANT SELECT ON GENDERS TO ABITURIENTS;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRIORITY_OF_SPECIALITIES TO ABITURIENTS;
GRANT SELECT ON PRIVELEGIES TO ABITURIENTS;
GRANT SELECT ON SPECIALITIES TO ABITURIENTS;
GRANT SELECT ON SUBJECTS TO ABITURIENTS;
GRANT SELECT ON TIMETABLE TO ABITURIENTS;
GRANT SELECT ON TIMETABLE_TYPES TO ABITURIENTS;
CREATE OR ALTER PROCEDURE SET_EXAM_GRADE (@id_abi INT)
AS
SET NOCOUNT ON;
DECLARE @avg_abi NUMERIC(4,2);
DECLARE exams CURSOR FOR
SELECT AVG(EXAM_GRADE) FROM EXAM_LISTS WHERE ID_ABITURIENT = @id_abi GROUP BY ID_ABITURIENT;
OPEN exams;
FETCH NEXT FROM exams INTO @avg_abi;
WHILE @@FETCH_STATUS = 0
   BEGIN

	  UPDATE ABITURIENTS
		SET	AVER_EXAM = @avg_abi
	  WHERE ID = @id_abi;

	  FETCH NEXT FROM exams INTO @avg_abi;
   END;
CLOSE exams;
DEALLOCATE exams;
CREATE OR ALTER PROCEDURE SET_RESULT_POINT (@id_abi INT)
AS
SET NOCOUNT ON;
DECLARE @id_abi INT; --ID_ABITURIENT
DECLARE @avg_abi NUMERIC(4,2); --AVG(RESULT)
DECLARE abiturient CURSOR FOR
SELECT ID, AVER_EXAM + AVER_DIPLOM FROM ABITURIENTS;
OPEN abiturient;
FETCH NEXT FROM abiturient INTO @id_abi, @avg_abi;
WHILE @@FETCH_STATUS = 0
   BEGIN
	  UPDATE ABITURIENTS
		SET	RESULT_POINTS = @avg_abi
	  WHERE ID = @id_abi;
	  FETCH NEXT FROM abiturient INTO @id_abi, @avg_abi;
   END;
CLOSE abiturient;
DEALLOCATE abiturient;
CREATE OR ALTER PROCEDURE SET_TIMETABLE
AS
	DECLARE @id_cab VARCHAR(7);
	DECLARE @id_start_exam DATETIME = '2021-07-10 09:00:00';
	DECLARE @id_middle_exam DATETIME = '2021-07-14 09:00:00';
	DECLARE @id_finish_exam DATETIME = '2021-07-18 09:00:00';
	DECLARE @id_meet VARCHAR(50);
	DECLARE @DATE_MEET DATETIME;
	DECLARE @ID INT;
	DECLARE @ID_CORP INT;
	DECLARE @id_sub INT = 1;
	DECLARE specilities CURSOR FOR
	SELECT SPECIALITIES.ID FROM SPECIALITIES;
	OPEN specilities;
	FETCH NEXT FROM specilities INTO @ID;
	WHILE @ID <= 9
	BEGIN
		SELECT @ID_CORP = (SELECT FACULTIES.CORPUS FROM SPECIALITIES, FACULTIES 
								WHERE FACULTIES.ID = SPECIALITIES.ID_FACULTY AND SPECIALITIES.ID = @ID);
		INSERT INTO TIMETABLE (ID_TYPE, ID_SUBJECT, DATE_OF_MEET, AUDITORY, ID_SPECIALTIES)
		VALUES (1, 1, @id_start_exam, CONVERT(VARCHAR(20),@ID_CORP,0) + '-108', @ID);
		SELECT @ID = @ID + 1;
	END;
	SELECT @ID = 1;
	WHILE @ID <= 9
	BEGIN
		SELECT @ID_CORP = (SELECT FACULTIES.CORPUS FROM SPECIALITIES, FACULTIES 
								WHERE FACULTIES.ID = SPECIALITIES.ID_FACULTY AND SPECIALITIES.ID = @ID);
		INSERT INTO TIMETABLE (ID_TYPE, ID_SUBJECT, DATE_OF_MEET, AUDITORY, ID_SPECIALTIES)
		VALUES (1, 2, @id_middle_exam, CONVERT(VARCHAR(20),@ID_CORP,0) + '-108', @ID);
		SELECT @ID = @ID + 1;
	END;
	SELECT @ID = 1;
	WHILE @ID <= 9
	BEGIN
		SELECT @ID_CORP = (SELECT FACULTIES.CORPUS FROM SPECIALITIES, FACULTIES 
								WHERE FACULTIES.ID = SPECIALITIES.ID_FACULTY AND SPECIALITIES.ID = @ID);
		INSERT INTO TIMETABLE (ID_TYPE, ID_SUBJECT, DATE_OF_MEET, AUDITORY, ID_SPECIALTIES)
		VALUES (1, 3, @id_finish_exam, CONVERT(VARCHAR(20),@ID_CORP,0) + '-108', @ID);
		SELECT @ID = @ID + 1;
	END;
	SELECT @ID = 1;
	WHILE @ID <= 9
	BEGIN
		WHILE @id_sub <= 3 AND @ID <= 9
		BEGIN
			SELECT @ID_CORP = (SELECT FACULTIES.CORPUS FROM SPECIALITIES, FACULTIES 
									WHERE FACULTIES.ID = SPECIALITIES.ID_FACULTY AND SPECIALITIES.ID = @ID);
			SELECT @DATE_MEET = (SELECT DATEADD(DAY, 1, DATE_OF_MEET) FROM TIMETABLE 
									WHERE ID_SUBJECT = @id_sub AND ID_TYPE = 1 AND ID_SPECIALTIES = @ID);
			INSERT INTO TIMETABLE (ID_TYPE, ID_SUBJECT, DATE_OF_MEET, AUDITORY, ID_SPECIALTIES)
			VALUES (2, @id_sub, @DATE_MEET, CONVERT(VARCHAR(20),@ID_CORP,0) + '-308', @ID);
			SELECT @id_sub = @id_sub + 1;
		END;
		SELECT @ID = @ID + 1;
		SELECT @id_sub = 1;
	END;
	CLOSE specilities;
	DEALLOCATE specilities;
CREATE OR ALTER TRIGGER SET_GROUP_EXAM
ON PRIORITY_OF_SPECIALITIES
AFTER INSERT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @ID VARCHAR(20);
	SELECT @ID = (SELECT ID_ABITURIENT FROM inserted);
	PRINT (@ID);
	UPDATE ABITURIENTS SET GROUP_EXAM = 
		(SELECT CONVERT(VARCHAR(20),CORPUS,0) + CONVERT(VARCHAR(20),CORPUS,0) + SUBSTRING(CONVERT(VARCHAR(20),SYSDATETIME(),3),7,2) 
			FROM FACULTIES, SPECIALITIES, PRIORITY_OF_SPECIALITIES
				WHERE PRIORITY_OF_SPECIALITIES.ID_ABITURIENT = ABITURIENTS.ID AND 
					  PRIORITY_OF_SPECIALITIES.PRIORITY = 1 AND 
					  PRIORITY_OF_SPECIALITIES.ID_SPECIALTIES = SPECIALITIES.ID AND 
					  SPECIALITIES.ID_FACULTY = FACULTIES.ID AND 
					  ABITURIENTS.ID = @ID)
	WHERE ABITURIENTS.ID = @ID;
END;
CREATE OR ALTER TRIGGER SET_AVER_EXAM
ON EXAM_LISTS
AFTER INSERT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @ID_SUB INT;
	SELECT @ID_SUB = (SELECT ID_SUBJECT FROM inserted);
	IF @ID_SUB = 3
	BEGIN
		DECLARE @ID INT;
		SELECT @ID = (SELECT ID_ABITURIENT FROM inserted);
		EXEC SET_EXAM_GRADE @ID;
		EXEC SET_RESULT_POINT @ID;
	END
END;
